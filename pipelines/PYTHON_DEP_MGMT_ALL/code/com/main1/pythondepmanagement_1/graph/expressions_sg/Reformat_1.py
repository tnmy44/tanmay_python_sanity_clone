from pyspark.sql import *
from pyspark.sql.functions import *
from pyspark.sql.types import *
from prophecy.utils import *
from prophecy.libs import typed_lit
from .config import *
from com.main1.pythondepmanagement_1.udfs.UDFs import *

def Reformat_1(spark: SparkSession, in0: DataFrame) -> DataFrame:
    return in0.select(
        col("customer_id"), 
        col("first_name"), 
        col("last_name"), 
        col("phone"), 
        col("email"), 
        col("country_code"), 
        col("account_open_date"), 
        col("account_flags"), 
        (
          ((((col("customer_id").cast(IntegerType()) > lit(5)) & (col("customer_id").cast(IntegerType()) != lit(0))) | col("first_name").like("%A%")) | (lit(1).bitwiseAND(lit(1)) == lit(1)))
          | (
            ((((((lit(2).bitwiseOR(lit(2)) == lit(2)) & ((lit(10) * col("customer_id").cast(IntegerType())) == lit(20))) & ((col("last_name") != col("first_name")) & (col("customer_id").cast(IntegerType()) != lit(10)))) & ((((col("customer_id").cast(IntegerType()) >= lit(10)) & (col("customer_id").cast(IntegerType()) <= lit(20))) & (array(lit(10), lit(20), lit(30))[2] == lit(30))) & (create_map(lit(1), lit("Hello"), lit(2), lit("World"))[1] == lit("Hello")))) & ((((lit(10).bitwiseXOR(lit(20)) == lit(50)) & (create_map(lit("three"), lit(3)).getField("four") == lit(None))) & (expr("named_struct('a', 5, 'b', 'Spark')").getField("a") == lit(5))) & ((((lit(1) == lit(2)) & (lit(1) == lit(2))) & (((((lit(1) >= lit(2)) & (lit(1) <= lit(2))) & (lit(1) != lit(3))) | (lit(2) > lit(4))) | (lit(4) < lit(5)))) & exists(array(lit(1), lit(None), lit(3)), lambda x: ((x % lit(2)) == lit(0)))))) | expr("ilike('Spark', '_PARK')"))
            | (
              ((((((((expr("named_struct('a', 1, 'b', 2)").isin(expr("named_struct('a', 1, 'b', 1)"), expr("named_struct('a', 1, 'b', 3)")) & ~ lit(1).eqNullSafe(lit(5))) & lit("invalid").eqNullSafe(lit(False))) & ((lit(1).isNull() & ~ lit("t").eqNullSafe(lit(True))) & lit(1).eqNullSafe(lit("1")))) & ((((lit(1) != col("customer_id").cast(IntegerType())) & (((lit(10) - lit(2)) + lit(10)) == lit(8))) & ~ lit(True)) & (((lit(False) | lit(True)) & ((lit(2) % lit(0)) == lit(0))) & (concat(lit("Spark"), lit("SQL")) == lit("SparkSQL"))))) & ((((lit("%SystemDrive%\\Users\\John").like("%SystemDrive%\\\\Users%") & lit("%SystemDrive%\\Users\\John").rlike("%SystemDrive%\\\\Users.*")) & expr("regexp_like('%SystemDrive%\\\\Users\\\\John', '%SystemDrive%\\\\\\\\Users.*')")) & ((((lit(2) / lit(2)) == lit(10)) & (bitwiseNOT(lit(0)) == lit(-1))) & (base64(expr("aes_encrypt('Spark', 'abcdefghijklmnop')")) == lit(None)))) & ((((expr("aes_decrypt(unbase64('4A5jOAh9FNGwoMeuJukfllrLdHEZxA2DyuSQAWz77dfn'), 'abcdefghijklmnop')").cast(StringType()) == lit(None)) & (ascii(lit("234")) == lit(234))) & (base64(lit("Spark SQL")) == lit(None))) & ((bin(lit(13)) == lit(None)) & (expr("binary('Spark SQL')") == lit(None)))))) & ((((((expr("btrim('abcaabaSparkSQLabcaaba', 'abc')") != lit(None)) & (expr("char(65)") != lit(None))) & (expr("char_length('Spark SQL ')") == lit(10))) & (((expr("character_length('Spark SQL ')") == lit(10)) & (concat(col("customer_id"), lit("hello")) != lit(None))) & (concat_ws(",", lit("Spark"), array(lit("S"), lit("Q"), lit(None), lit("L")), lit(None)) != lit(None)))) & (((lit("SparkSQL").contains(lit("Spork")) & (crc32(lit("Spark")) > lit(0))) & (expr("chr(65)") != lit(None))) & (((lit(3).bitwiseXOR(lit(5)) == lit(6)) & (hex(encode(lit("Spark SQL"), "US-ASCII")) != lit(None))) & lit("SparkSQL").endswith(lit("SQL"))))) & (((((expr("find_in_set('ab', 'abc,b,ab,c,def')") == lit(2)) & (format_number(lit(12332.123456), 4) == lit(2))) & (expr("format_number(12332.123456D, '#.###')") == lit(10))) & (((format_string("Hello World %d %s", lit(100), lit("days")) != lit(None)) & (hex(lit("Spark SQL")) != lit(None))) & lit("%SystemDrive%\\Users\\John").like("%SystemDrive%\\\\Users%"))) & ((((initcap(lit("sPark sql")) != lit(None)) & (instr(lit("SparkSQL"), "R") == lit(2))) & (expr("lcase('LowerCase')") != lit(None))) & ((expr("left('Spark SQL', 3)") != lit(None)) & (length(lit("Spark SQL ")) > lit(20))))))) & (((((((levenshtein(lit("kitten"), lit("sitting")) > lit(10)) & (locate("bar", lit("abcbarbar")) > lit(2))) & (locate("bar", lit("abcbarbar"), 5) > lit(2))) & (((lower(lit("LowerCase")) != lit(None)) & (lpad(lit("hi"), 1, "??") != lit(None))) & (hex(expr("lpad(X'1020', 5, X'05')")) != lit(None)))) & ((((md5(lit("Spark")) != lit(None)) & (expr("octet_length('Spark SQL')") != lit(None))) & (expr("parse_url('http://spark.apache.org/path?query=1', 'HOST')") != lit(None))) & (((expr("position('bar', 'abcbarbar')") > lit(10)) & (expr("position('bar', 'abcbarbar', 5)") > lit(5))) & (expr("printf('Hello World %d %s', 100, 'days')") != lit(None))))) & ((((lit("%SystemDrive%\\Users\\John").rlike("%SystemDrive%\\\\Users.*") & lit("%SystemDrive%\\Users\\John").rlike("%SystemDrive%\\\\Users.*")) & expr("regexp_like('%SystemDrive%\\\\Users\\\\John', '%SystemDrive%\\\\\\\\Users.*')")) & (((regexp_extract(lit("100-200"), "(\\d+)-(\\d+)", 1) > lit(10)) & (expr("regexp_extract_all('100-200, 300-400', '(\\\\d+)-(\\\\d+)', 1)") != lit(None))) & (regexp_replace(lit("100-200"), "(\\d+)", "num") != lit(None)))) & ((((repeat(lit("123"), 2) != lit(None)) & (expr("replace('ABCabc', 'abc', 'DEF')") != lit(None))) & (reverse(lit("Spark SQL")) != lit(None))) & ((expr("right('Spark SQL', 3)") != lit(None)) & (rpad(lit("hi"), 5, "ab") != lit(None)))))) & ((((((hex(expr("rpad(X'1020', 5, X'05')")) != lit(None)) & (expr("sentences('Hi there! Good morning.', 'en', 'US')") != lit(None))) & (expr("sha('Spark')") != lit(None))) & (((sha1(lit("Spark")) != lit(None)) & (sha2(lit("Spark"), 256) != lit(None))) & (soundex(lit("Miller")) != lit(None)))) & ((((concat(lit("1"), expr("space(2)"), lit("1")) != lit(None)) & (concat(concat(lit("->"), expr("split_part('Hello,world,!', ',', 1)")), lit("<-")) != lit(None))) & (concat(concat(lit("->"), expr("split_part('', ',', 1)")), lit("<-")) != lit(None))) & ((concat(concat(lit("->"), expr("split_part('Hello,World,!', ',', 0)")), lit("<-")) != lit(None)) & lit("SparkSQL").startswith(lit("Spark"))))) & ((((lit(None).startswith(lit("Spark")) & (substring(lit("Spark SQL"), 5, 1) != lit(None))) & (substring_index(lit("www.apache.org"), ".", 2) != lit(None))) & (((expr("to_binary('537061726B')").cast(StringType()) != lit(None)) & (expr("to_binary('537061726B', 'hex')").cast(StringType()) != lit(None))) & (expr("try_to_binary('U3Bhxcms=', 'base64')").cast(StringType()) != lit(None)))) & ((((translate(lit("AaBbCc"), "abc", "123") != lit(None)) & (expr("try_to_binary('U3Bhxcms=', 'base64')").cast(StringType()) != lit(None))) & (expr("ucase('SparkSql')") != lit(None))) & ((unbase64(lit("U3BhcmsgU1FM")).cast(StringType()) != lit(None)) & (decode(unhex(lit("537061726B2053514C")), "UTF-8") != lit(None)))))))) & ((((((((upper(lit("SparkSql")) != lit(None)) & ((lit(10) / lit(2)) == lit(5))) & (lit(3).bitwiseOR(lit(5)) == lit(2))) & (((((lit(10) - lit(2)) + lit(2)) == lit(4)) & ((lit(2) % lit(1.8)) == lit(2))) & (lit(3).bitwiseXOR(lit(5)) == lit(3)))) & ((((lit(3).bitwiseAND(lit(5)) == lit(2)) & ((lit(3) * lit(2)) == lit(2))) & ((expr("INTERVAL '3' YEAR") * lit(3)) != lit(None))) & (((abs(lit(-1)) == lit(1)) & (acos(lit(1)) == lit(1))) & (expr("acosh(1)") == lit(1))))) & (((((asin(lit(0)) == lit(1)) & (expr("asinh(0)") == lit(1))) & (atan(lit(0)) == lit(1))) & (((atan2(lit(0), 0.0) == lit(1)) & (expr("atanh(0)") == lit(1))) & (expr("bigint(current_timestamp)") > lit(1)))) & ((((expr("bit_count(-1)") > lit(1)) & (expr("bit_get(23Y, 1)") == lit(1))) & (bround(lit(13.5), -1) == lit(1))) & ((round(lit(13.5), -1) == lit(1)) & (cbrt(lit(27.0)) == lit(3)))))) & ((((((expr("ceil(3345.1D, -2)") == lit(1)) & (expr("ceiling(5.4BD)") == lit(6))) & (expr("ceiling(3345.1BD, -2)") == lit(1))) & (((conv(lit("100"), 2, 10) == lit(4)) & (conv(lit("FFFFFFFFFFFFFFFF"), 16, 10) == lit(1))) & (cos(expr("pi()")) == lit(-1)))) & ((((cosh(lit(0)) == lit(1)) & (expr("cot(1)") == lit(1))) & (csc((expr("pi()") / lit(2))) == lit(2))) & ((expr("decimal('5.2')") == lit(5)) & (degrees(lit(3.141592653589793)) == lit(10))))) & (((((expr("double('5.2')") == lit(4)) & (expr("e()") == lit(2))) & (exp(lit(1)) == lit(2))) & (((expm1(lit(0)) == lit(1)) & (factorial(lit(2)) == lit(2))) & (expr("float('5.2')") == lit(5)))) & ((((floor(lit(-0.1)) == lit(-1)) & (expr("floor(3345.1D, -2)") == lit(20))) & (expr("getbit(23Y, 0)") == lit(1))) & ((hypot(3.0, lit(4)) == lit(5)) & (expr("int(-5.6BD)") == lit(5))))))) & ((((((isnan(lit("NaN").cast(DoubleType())) & (expr("ln(1)") == lit(1))) & (log(10.0, lit(100)) == lit(2))) & (((log1p(lit(0)) == lit(1)) & (log2(lit(2)) == lit(1))) & (log10(lit(10)) == lit(1)))) & ((((nanvl(lit("NaN").cast(DoubleType()), lit(123)) == lit(2)) & (expr("negative(1)") == lit(-1))) & ((lit(-10) % lit(3)) == lit(2))) & (((expr("positive(-1)") == lit(-1)) & ((pow(lit(2), lit(3)) * expr("power(2, 3)")) == lit(8))) & (radians(lit(180)) == lit(10))))) & ((((((expr("rand(0)") * expr("random(0)")) == lit(1)) & (expr("randn(0)") == lit(1))) & (rint(lit(12.3456)) == lit(1))) & (((round(lit(2.5), 0) == lit(3)) & (sec(expr("pi()")) == lit(-1))) & (sin(lit(0)) == lit(0)))) & ((((shiftLeft(lit(2), 1) == lit(2)) & (shiftRight(lit(4), 1) == lit(2))) & (shiftRightUnsigned(lit(4), 1) == lit(2))) & ((expr("sign(40)") == lit(1)) & (signum(lit(40)) == lit(1)))))) & ((((((sinh(lit(0)) == lit(1)) & (expr("smallint(-5.6BD)") == lit(5))) & (sqrt(lit(4)) == lit(2))) & (((tan(lit(0)) == lit(1)) & (tanh(lit(0)) == lit(1))) & ((expr("tinyint('12')") * expr("tinyint(5.4BD)")) == lit(1)))) & (((((expr("to_number('$345', 'S$999,099.99')") + expr("to_number('<1234>', '999999PR')")) == lit(2)) & (expr("try_add(DATE '2021-03-20', INTERVAL '2' MONTH)") != lit(None))) & (expr("try_add(1, 2)") == lit(3))) & ((expr("try_divide(3, 2)") == lit(3)) & (expr("try_divide(INTERVAL '03:15' HOUR TO MINUTE, 3)") != lit(None))))) & (((((expr("try_subtract(1, 2)") == lit(2)) & (expr("try_subtract(TIMESTAMP '2021-03-20 12:15:29', INTERVAL '03' SECOND)") != lit(None))) & (expr("try_subtract(-128Y, 1Y)") != lit(None))) & ((((expr("try_to_number('$345', 'S$999,099.99')") / expr("try_to_number('<1234>', '999999PR')")) == lit(1)) & ((expr("width_bucket(5.3BD, 0.2BD, 10.6BD, 5)") + expr("width_bucket(-0.9BD, 5.2BD, 0.5BD, 2)")) == lit(3))) & (expr("width_bucket(INTERVAL '1' DAY, INTERVAL '0' DAY, INTERVAL '10' DAY, 11)") == lit(10)))) & ((((array(lit(10), lit(20), lit(30)) != lit(None)) & (aggregate(array(lit(1), lit(2), lit(3)), lit(0), lambda acc, x: (acc + x), lambda acc: (acc * lit(10))) == lit(1))) & array_contains(array(lit(1), lit(2), lit(3)), lit(2))) & ((array_distinct(array(lit(1), lit(2), lit(3), lit(None), lit(3))) != lit(None)) & (array_except(array(lit(1), lit(2), lit(2), lit(3)), array(lit(1), lit(1), lit(3), lit(5))) != lit(None)))))))))
              & (
                ((((((((array_intersect(array(lit(1), lit(2), lit(3)), array(lit(1), lit(3), lit(3), lit(5))) != lit(None)) & (array_join(array(lit("hello"), lit("world")), ",") != lit(None))) & (array_join(array(lit("hello"), lit(None), lit("world")), ",", "*") == lit(None))) & (((array_max(array(lit(1), lit(20), lit(None), lit(3))) > lit(10)) & (array_min(array(lit(1), lit(20), lit(None), lit(3))) == lit(1))) & (array_position(array(lit(3), lit(2), lit(1), lit(4), lit(1)), 1) == lit(2)))) & ((((array_remove(array(lit(1), lit(2), lit(3), lit(None), lit(3), lit(2)), 3) != lit(None)) & (array_repeat(lit("123"), lit(2)) != lit(None))) & (expr("array_size(array(1, NULL, 3, NULL))") == lit(2))) & (((expr("array_sort(array('bc', 'ab', 'dc'), (left, right) -> CASE WHEN (isnull(left) AND isnull(right)) THEN 0 WHEN isnull(left) THEN -1 WHEN isnull(right) THEN 1 WHEN (left < right) THEN 1 WHEN (left > right) THEN -1 ELSE 0 END)") != lit(None)) & (array_union(array(lit(1), lit(2), lit(2), lit(3)), array(lit(1), lit(3), lit(5))) != lit(None))) & (arrays_overlap(array(lit(1), lit(2), lit(None), lit(3)), array(lit(None), lit(4), lit(5))) == lit(None))))) & (((((arrays_zip(array(lit(1), lit(2)), array(lit("shoe"), lit("string"), lit("budget"))) == lit(None)) & (expr("cardinality(array('b', 'd', 'c', 'a'))") == lit(2))) & (concat(array(lit(1), lit(2), lit(3)), array(lit(4), lit(5)), array(lit(6))) != lit(None))) & (((element_at(create_map(lit(1), lit("a"), lit(2), lit("b")), 2) == lit(None)) & exists(array(lit(1), lit(2), lit(3)), lambda x: ((x % lit(2)) == lit(0)))) & exists(array(lit(0), lit(None), lit(2), lit(3), lit(None)), lambda x: x.isNull()))) & ((((filter(array(lit(1), lit(2), lit(3)), lambda x: ((x % lit(2)) == lit(1))) != lit(None)) & (flatten(array(array(lit(1), lit(2)), array(lit(3), lit(4)))) != lit(None))) & (forall(array(lit(1), lit(2), lit(3)), lambda x: ((x % lit(2)) == lit(0))) == lit(None))) & ((reverse(array(lit(2), lit(1), lit(4), lit(3))) != lit(None)) & (sequence(lit(5), lit(1)) != lit(None)))))) & ((((((expr("cardinality(array('b', 'd', 'c', 'a'))") == lit(10)) & (slice(array(lit(1), lit(2), lit(3), lit(4)), 2, 2) != lit(None))) & (sort_array(array(lit("b"), lit("d"), lit(None), lit("c"), lit("a")), True) != lit(None))) & (((transform(array(lit(1), lit(2), lit(3)), lambda x: (x + lit(1))) != lit(None)) & (expr("try_element_at(array(1, 2, 3), 2)") == lit(2))) & (zip_with(array(lit("a"), lit("b"), lit("c")), array(lit("d"), lit("e"), lit("f")), lambda x, y: concat(x, y)) != lit(None)))) & ((((create_map(lit(1), lit("Hello"), lit(2), lit("World"))[1] != lit(None)) & (expr("cardinality(map('a', 1, 'b', 2))") == lit(2))) & (element_at(create_map(lit(1), lit("a"), lit(2), lit("b")), 3) == lit(None))) & ((create_map(lit(1.0), lit("2"), lit(3.0), lit("4")).isNotNull() & map_concat(create_map(lit(1), lit("a"), lit(2), lit("b")), create_map(lit(3), lit("c"))).isNotNull()) & map_entries(create_map(lit(1), lit("a"), lit(2), lit("b"))).isNotNull()))) & ((((map_filter(create_map(lit(1), lit(0), lit(2), lit(2), lit(3), lit(-1)), lambda k, v: (k > v)).isNotNull() & map_from_arrays(array(lit(1.0), lit(3.0)), array(lit("2"), lit("4"))).isNotNull()) & map_from_entries(array(struct(lit(1).alias("col1"), lit("a").alias("col2")), struct(lit(2).alias("col1"), lit("b").alias("col2")))).isNotNull()) & ((map_keys(create_map(lit(1), lit("a"), lit(2), lit("b"))).isNotNull() & map_values(create_map(lit(1), lit("a"), lit(2), lit("b"))).isNotNull()) & map_zip_with(create_map(lit(1), lit("a"), lit(2), lit("b")), create_map(lit(1), lit("x"), lit(2), lit("y")), lambda k, v1, v2: concat(v1, v2)).isNotNull())) & ((((expr("cardinality(map('a', 1, 'b', 2))") == lit(2)) & expr("str_to_map('a:1,b:2,c:3', ',', ':')").isNotNull()) & transform_keys(map_from_arrays(array(lit(1), lit(2), lit(3)), array(lit(1), lit(2), lit(3))), lambda k, v: (k + lit(1))).isNotNull()) & (transform_values(map_from_arrays(array(lit(1), lit(2), lit(3)), array(lit(1), lit(2), lit(3))), lambda k, v: (k + v)).isNotNull() & expr("try_element_at(map(1, 'a', 2, 'b'), 2)").isNotNull()))))) & (((((((expr("INTERVAL '0 03:15:00' DAY TO SECOND") / lit(3)).isNotNull() & (- expr("INTERVAL '5' MONTH") != lit(None))) & (expr("typeof((current_timestamp - (current_date + INTERVAL '1' DAY)))") != lit(None))) & ((((expr("INTERVAL '3' YEAR") * lit(3)) != lit(None)) & (add_months(lit("2016-08-31"), -6) != lit(None))) & (current_date() != lit(None)))) & ((((current_timestamp() != lit(None)) & (expr("current_timezone()") != lit(None))) & (expr("date('2021-03-21')") != lit(None))) & (((date_add(lit("2016-07-30"), 1) != lit(None)) & (date_format(lit("2016-04-08"), "y") == lit(2016))) & (expr("date_from_unix_date(1)") != lit(None))))) & (((((date_sub(lit("2016-07-30"), 1) != lit(None)) & (date_trunc("YEAR", lit("2015-03-05T09:32:05.359")) != lit(None))) & (datediff(lit("2009-07-31"), lit("2009-07-30")) == lit(1))) & (((expr("day('2009-07-30')") == lit(30)) & (dayofmonth(lit("2009-07-30")) == lit(30))) & (dayofweek(lit("2009-07-30")) == lit(5)))) & ((((dayofyear(lit("2016-04-09")) == lit(100)) & (expr("extract('SECONDS', INTERVAL '05:00:30.001' HOUR TO SECOND)") == lit(30))) & (expr("extract('week', TIMESTAMP '2019-08-12 01:00:00.123456')") == lit(33))) & ((from_unixtime(lit(0), "yyyy-MM-dd HH:mm:ss") != lit(None)) & (from_utc_timestamp(lit("2017-07-14 02:40:00.0"), "GMT+1") != lit(None)))))) & ((((((from_utc_timestamp(lit("2016-08-31"), "Asia/Seoul") != lit(None)) & (hour(lit("2009-07-30 12:58:59")) == lit(10))) & last_day(lit("2009-01-12")).isNotNull()) & ((make_date(lit(2013), lit(7), lit(15)).isNotNull() & expr("make_dt_interval(0, 0, 1, -0.1BD)").isNotNull()) & expr("make_ym_interval(100, 5)").isNotNull())) & ((((minute(lit("2009-07-30 12:58:59")) == lit(58)) & (month(lit("2016-07-30")) == lit(7))) & (months_between(lit("1997-02-28 10:30:00"), lit("1996-10-30")) == lit(3))) & ((months_between(lit("1997-02-28 10:30:00"), lit("1996-10-30"), False) == lit(2)) & (next_day(lit("2015-01-14"), "TU") != lit(None))))) & (((((quarter(lit("2016-08-31")) == lit(3)) & (second(lit("2009-07-30 12:58:59")) == lit(59))) & (expr("sign(INTERVAL '-1' DAY)") == lit(-1))) & (((signum(expr("INTERVAL '-1 00:00:00' DAY TO SECOND")) == lit(-1)) & (expr("timestamp(123)") != lit(None))) & (expr("timestamp('2020-04-30 12:25:13.45')") != lit(None)))) & ((((expr("timestamp_micros(1230219000123123L)") != lit(None)) & (expr("timestamp_millis(1230219000123L)") != lit(None))) & (timestamp_seconds(lit(1230219000)) != lit(None))) & ((to_date(lit("2016-12-31"), "yyyy-MM-dd") != lit(None)) & (to_timestamp(lit("2016-12-31"), "yyyy-MM-dd") != lit(None))))))))
                & (
                  (((((((to_utc_timestamp(lit("2017-07-14 02:40:00.0"), "GMT+1") != lit(None)) & (trunc(lit("2015-10-27"), "YEAR") != lit(None))) & (trunc(lit("2019-08-04"), "quarter") != lit(None))) & (((expr("try_add(TIMESTAMP '2021-03-20 12:15:29', INTERVAL '03' SECOND)") != lit(None)) & (expr("try_add(DATE '2021-03-31', INTERVAL '1' MONTH)") != lit(None))) & (expr("try_divide(INTERVAL '03:15' HOUR TO MINUTE, 3)") != lit(None)))) & (((((expr("INTERVAL '3' YEAR") * lit(3)) != lit(None)) & (expr("try_subtract(DATE '2021-03-20', INTERVAL '2' MONTH)") != lit(None))) & (expr("try_subtract(TIMESTAMP '2021-03-20 12:15:29', INTERVAL '03' SECOND)") != lit(None))) & (((expr("unix_date(DATE('1970-01-02'))") == lit(1)) & (expr("unix_micros(TIMESTAMP('1970-01-01 00:00:01Z'))") == lit(1))) & (expr("unix_millis(TIMESTAMP('1970-01-01 00:00:01Z'))") == lit(1))))) & (((((expr("unix_seconds(TIMESTAMP('1970-01-01 00:00:01Z'))") == lit(1)) & (unix_timestamp(lit("2016-04-08"), "yyyy-MM-dd") == lit(1))) & (expr("weekday(DATE '2009-07-30')") == lit(1))) & (((expr("extract('DAYOFWEEK_ISO', DATE '2009-07-30')") == lit(4)) & (weekofyear(lit("2008-02-20")) == lit(8))) & (year(lit("2016-07-30")) == lit(2016)))) & ((((array(lit(1), lit(2), lit(3)) != lit(None)) & (expr("bigint('5')") == lit(5))) & (expr("binary('Spark SQL')") != lit(None))) & (expr("boolean(1)") & (lit(5.6).cast(DecimalType(2, 0)) != lit(None)))))) & ((((((expr("INTERVAL '1-2' YEAR TO MONTH").cast(IntegerType()) == lit(12)) & (expr("date('2021-03-21')") != lit(None))) & (expr("decimal('5.2')") == lit(5))) & ((((expr("double('5.2')") / lit(2)) == lit(5)) & ((expr("float('5.2')") / lit(2)) == lit(2))) & (expr("int('5')") == lit(5)))) & ((((make_date(lit(2013), lit(7), lit(15)) != lit(None)) & (expr("make_dt_interval(100, 13)") != lit(None))) & (expr("make_ym_interval(100, 5)") == lit(None))) & (create_map(lit(1.0), lit("2"), lit(3.0), lit("4")).isNotNull() & expr("named_struct('a', 1, 'b', 2, 'c', 3)").isNotNull()))) & (((((expr("smallint('5')") == lit(5)) & struct(lit(1).alias("col1"), lit(2).alias("col2"), lit(3).alias("col3")).isNotNull()) & (expr("tinyint('12')") == lit(12))) & (((expr("timestamp('2020-04-30 12:25:13.45')") != lit(None)) & (to_date(lit("2016-12-31"), "yyyy-MM-dd") != lit(None))) & (expr("to_number('-$12,345.67', 'S$999,099.99')") > lit(10)))) & ((((to_timestamp(lit("2016-12-31 00:12:00")) != lit(None)) & (expr("TRY_CAST('10' AS INT)") == lit(10))) & (expr("try_to_number('-$12,345.67', 'S$999,099.99')") != lit(None))) & ((expr("from_csv('1, 0.8', 'a INT, b DOUBLE')") != lit(None)) & (schema_of_csv("1,abc") != lit(None)))))))
                  & (
                    ((((((expr("json_array_length('[1,2,3,{\"f1\":1,\"f2\":[5,6]},4]')") == lit(5)) & (expr("json_object_keys('{\"f1\":\"abc\",\"f2\":{\"f3\":\"a\", \"f4\":\"b\"}}')") != lit(None))) & (expr("schema_of_json('[{\"col\":01}]', map('allowNumericLeadingZeros', 'true'))") != lit(None))) & (((to_json(expr("named_struct('a', 1, 'b', 2)")) != lit(None)) & (to_json(create_map(expr("named_struct('a', 1)"), expr("named_struct('b', 2)"))) != lit(None))) & (to_json(array(create_map(lit("a"), lit(1)))) != lit(None)))) & ((((expr("xpath('<a><b>b1</b><b>b2</b><b>b3</b><c>c1</c><c>c2</c></a>', 'a/b/text()')") != lit(None)) & expr("xpath_boolean('<a><b>1</b></a>', 'a/b')")) & (expr("xpath_double('<a><b>1</b><b>2</b></a>', 'sum(a/b)')") != lit(None))) & (((expr("xpath_float('<a><b>1</b><b>2</b></a>', 'sum(a/b)')") != lit(None)) & (expr("xpath_int('<a><b>1</b><b>2</b></a>', 'sum(a/b)')") == lit(2))) & (expr("xpath_long('<a><b>1</b><b>2</b></a>', 'sum(a/b)')") == lit(3))))) & (((((expr("xpath_number('<a><b>1</b><b>2</b></a>', 'sum(a/b)')") == lit(2)) & (expr("xpath_int('<a><b>1</b><b>2</b></a>', 'sum(a/b)')") == lit(2))) & (expr("xpath_string('<a><b>b</b><c>cc</c></a>', 'a/c')") != lit(None))) & (((expr("assert_true((0 < 1))") == lit(None)) & (when((lit(1) > lit(0)), lit(1)).when((lit(2) > lit(0)), lit(2.0)).otherwise(lit(1.2)) == lit(1))) & (when((lit(3) == lit(1)), lit("A")).when((lit(3) == lit(2)), lit("B")).when((lit(3) == lit(3)), lit("C")) != lit(None)))) & ((((coalesce(lit(2), (lit(5) / lit(0))) == lit(2)) & (expr("current_catalog()") != lit(None))) & (expr("current_database()") != lit(None))) & ((expr("current_user()") != lit(None)) & (expr("decode(5, 6, 'Spark', 5, 'SQL', 4, 'rocks')") != lit(None))))))
                    & (
                      (((((expr("elt(1, 'scala', 'java')") != lit(None)) & (greatest(lit(10), lit(9), lit(2), lit(4), lit(3)) == lit(10))) & (hash(lit("Spark"), array(lit(123)), lit(2)) != lit(None))) & (((expr("java_method('java.util.UUID', 'fromString', 'a5cf6c42-0c85-418f-af6c-3e4e5b1328f2')") != lit(None)) & (expr("if((1 < 2), 'a', 'b')") != lit(None))) & (expr("ifnull(NULL, array('2'))") != lit(None)))) & ((((expr("input_file_block_length()") == lit(-1)) & (expr("input_file_block_start()") == lit(-1))) & (input_file_name() != lit(None))) & (lit(1).isNull() & lit(1).isNotNull())))
                      & (
                        ((((least(lit(10), lit(9), lit(2), lit(4), lit(3)) == lit(2)) & (monotonically_increasing_id() > lit(10))) & (expr("nullif(2, 2)") == lit(None))) & (((expr("nvl(NULL, 2)") == lit(2)) & (expr("nvl2(NULL, 2, 1)") == lit(1))) & (expr("reflect('java.util.UUID', 'randomUUID')") != lit(None))))
                        & (
                          (((expr("typeof(1)") != lit(None)) & (expr("uuid()") != lit(None))) & (xxhash64(lit("Spark"), array(lit(123)), lit(2)) != lit(None)))
                          & (
                            (shuffle(array(lit(1), lit(20), lit(3), lit(5))) != lit(None))
                            & from_json(lit("{\"a\":1, \"b\":0.8}"), "a INT, b DOUBLE").isNotNull()
                          )
                        )
                      )
                    )
                  )
                )
              )
            )
          )
        )\
          .alias(
          "c_expressions"
        )
    )
